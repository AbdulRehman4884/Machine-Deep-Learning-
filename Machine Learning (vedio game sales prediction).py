# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rgX5Xv7moxuBZLzKsgH8bI0aS92QIdrd
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load your data
file_path = '/content/Dataset(Vedio_Game_Sale_Prediction).csv'
df = pd.read_csv(file_path)

# Separate numeric and non-numeric columns
numeric_cols = df.select_dtypes(include=np.number).columns
non_numeric_cols = list(set(df.columns) - set(numeric_cols))

# Handle missing values for numeric columns
imputer_numeric = SimpleImputer(strategy='mean')
df[numeric_cols] = imputer_numeric.fit_transform(df[numeric_cols])

# Note: You may need a different strategy for non-numeric columns, depending on your specific use case
# For simplicity, we will fill them with a placeholder value ('Unknown' in this case)
imputer_non_numeric = SimpleImputer(strategy='constant', fill_value='Unknown')
df[non_numeric_cols] = imputer_non_numeric.fit_transform(df[non_numeric_cols])

# Define features and target
X = df[numeric_cols]
y = df['Global_Sales']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Build a simple neural network
model = Sequential()
model.add(Dense(64, activation='relu', input_dim=X_train.shape[1]))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='linear'))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, validation_split=0.1, verbose=2)

# Evaluate on the test set
y_pred = model.predict(X_test_scaled)
mse = mean_squared_error(y_test, y_pred)
print('Mean Squared Error on Test Set:', mse)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv('/content/Dataset(Vedio_Game_Sale_Prediction).csv')

data.head()

data.info()

data.describe()

# let us check whether there is any nan values present in the dataset
data.isnull().sum()

#let us drop all the nan values
data=data.dropna()

sns.heatmap(data.isnull())

genre=data.groupby('Genre')['Platform'].count().sort_values(ascending=False).head(11)

genre.index

from IPython.core.pylabtools import figsize
colors=['#00876c','#4c9c85','#78b19f','#a0c6b9','#c8dbd5','#f1f1f1','#f1cfce','#eeadad','#e88b8d','#df676e','#d43d51']
plt.title('TOP 11 GENRE W.R.T. Platform',fontsize=20)
plt.pie(genre,labels=genre.index,colors=colors)

genre=data.groupby('Global_Sales')['Name'].count().sort_values(ascending=False).head(5)

plt.plot(data['Global_Sales'])

plt.plot(data['JP_Sales'])

plt.plot(data['EU_Sales'])

plt.plot(data['NA_Sales'])

sns.scatterplot(x=data['EU_Sales'],y=data['JP_Sales'])

sns.heatmap(data.corr(),annot=True)

sns.scatterplot(x=data['NA_Sales'],y=data['Global_Sales'])

sns.scatterplot(x=data['EU_Sales'],y=data['Global_Sales'])

sns.pairplot(data)

data.columns

data.drop(columns=['Name', 'Platform', 'Year_of_Release', 'Genre', 'Publisher'],axis=1,inplace=True)

data.head()